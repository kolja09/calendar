{"version":3,"sources":["store/reducers/auth/types.ts","utils/rules.ts","hooks/useTypedSelector.ts","store/reducers/event/types.ts","api/UserService.ts","store/reducers/auth/action-creators.ts","store/reducers/event/action-creators.ts","router/index.ts","store/reducers/action-creators.ts","hooks/useActions.ts","components/LoginForm.tsx","pages/Login.tsx","utils/date.ts","components/EventCalendar.tsx","components/EventForm.tsx","pages/Event.tsx","components/AppRouter.tsx","components/Navbar.tsx","App.tsx","store/reducers/auth/index.ts","store/reducers/event/index.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["AuthActionEnum","rules","message","required","validator","_","value","isSameOrAfter","moment","Promise","resolve","reject","Error","useTypedSelector","useSelector","EventActionEnum","UserService","axios","get","AuthActionCreators","setUser","user","type","SET_USER","payload","setIsAuth","auth","SET_AUTH","setIsLoading","SET_IS_LOADING","setError","SET_ERROR","login","username","password","dispatch","a","setTimeout","getUsers","response","mockUser","data","find","localStorage","setItem","e","logout","removeItem","RouteNames","EventActionCreators","setGuests","SET_GUESTS","setEvents","SET_EVENTS","fetchGuests","console","log","createEvent","event","events","getItem","json","JSON","parse","push","stringify","fetchEvents","currentUserEvents","filter","ev","author","guest","allActionCreators","useActions","useDispatch","bindActionCreators","LoginForm","state","error","isLoading","useState","setUsername","setPassword","onFinish","style","color","Item","label","name","onChange","target","htmlType","loading","Login","justify","align","className","formatDate","date","year","getFullYear","month","getMonth","day","getDate","EventCalendar","props","dateCellRender","formatedDate","toDate","currentDayEvents","map","index","description","EventForm","setEvent","submit","selectDate","guests","Option","Event","modalVisible","setModalVisible","useEffect","onClick","title","visible","footer","onCancel","publicRoutes","path","LOGIN","exact","component","privateRoutes","EVENT","AppRouter","isAuth","route","to","Navbar","router","useHistory","Header","theme","mode","selectable","App","Content","initialState","action","rootReducer","combineReducers","reducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01ecf15f.chunk.js","sourcesContent":["import {IUser} from \"../../../models/IUser\";\r\n\r\nexport interface AuthState {\r\n    isAuth: boolean;\r\n    user: IUser;\r\n    isLoading: boolean;\r\n    error: string;\r\n}\r\n\r\nexport enum AuthActionEnum {\r\n    SET_AUTH = \"SET_AUTH\",\r\n    SET_ERROR = \"SET_ERROR\",\r\n    SET_USER = \"SET_USER\",\r\n    SET_IS_LOADING = \"SET_IS_LOADING\",\r\n}\r\n\r\nexport interface SetAuthAction {\r\n    type: AuthActionEnum.SET_AUTH;\r\n    payload: boolean;\r\n}\r\nexport interface SetErrorAction {\r\n    type: AuthActionEnum.SET_ERROR;\r\n    payload: string;\r\n}\r\nexport interface SetUserAction {\r\n    type: AuthActionEnum.SET_USER;\r\n    payload: IUser;\r\n}\r\nexport interface SetIsLoadingAction {\r\n    type: AuthActionEnum.SET_IS_LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport type AuthAction =\r\n    SetAuthAction |\r\n    SetUserAction |\r\n    SetErrorAction |\r\n    SetIsLoadingAction\r\n","import moment, {Moment} from \"moment\";\r\n\r\nexport const rules = {\r\n    required: (message: string = \"Обязательное поле\") => ({\r\n        required: true,\r\n        message\r\n    }),\r\n    isDateAfter: (message: string) => () => ({\r\n        validator(_: any, value: Moment) {\r\n            if (value.isSameOrAfter(moment())) {\r\n                return Promise.resolve()\r\n            }\r\n            return Promise.reject(new Error(message));\r\n        }\r\n    })\r\n}\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\n\r\n\r\nexport interface EventState {\r\n    guests: IUser[];\r\n    events: IEvent[];\r\n}\r\n\r\nexport enum EventActionEnum {\r\n    SET_GUESTS = \"SET_GUESTS\",\r\n    SET_EVENTS = \"SET_EVENTS\"\r\n}\r\n\r\nexport interface SetGuestsAction {\r\n    type: EventActionEnum.SET_GUESTS;\r\n    payload: IUser[]\r\n}\r\n\r\nexport interface SetEventsAction {\r\n    type: EventActionEnum.SET_EVENTS;\r\n    payload: IEvent[]\r\n}\r\n\r\nexport type EventAction =\r\n    SetGuestsAction |\r\n    SetEventsAction\r\n","import axios, {AxiosResponse} from \"axios\";\r\nimport {IUser} from \"../models/IUser\";\r\n\r\nexport default class UserService {\r\n    static async getUsers(): Promise<AxiosResponse<IUser[]>> {\r\n        return axios.get<IUser[]>('./users.json')\r\n    }\r\n}\r\n","import {AuthActionEnum, SetAuthAction, SetErrorAction, SetIsLoadingAction, SetUserAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport axios from \"axios\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\nexport const AuthActionCreators = {\r\n    setUser: (user: IUser): SetUserAction => ({type: AuthActionEnum.SET_USER, payload: user}),\r\n    setIsAuth: (auth: boolean): SetAuthAction => ({type: AuthActionEnum.SET_AUTH, payload: auth}),\r\n    setIsLoading: (payload: boolean): SetIsLoadingAction => ({type: AuthActionEnum.SET_IS_LOADING, payload}),\r\n    setError: (payload: string): SetErrorAction => ({type: AuthActionEnum.SET_ERROR, payload}),\r\n    login: (username: string, password: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(AuthActionCreators.setIsLoading(true));\r\n            setTimeout(async () => {\r\n                const response = await UserService.getUsers()\r\n                const mockUser = response.data.find(user => user.username === username && user.password === password);\r\n                if (mockUser) {\r\n                    localStorage.setItem('auth', 'true');\r\n                    localStorage.setItem('username', mockUser.username);\r\n                    dispatch(AuthActionCreators.setUser(mockUser));\r\n                    dispatch(AuthActionCreators.setIsAuth(true))\r\n                } else {\r\n                    dispatch(AuthActionCreators.setError('Некорректный логин или пароль'));\r\n                }\r\n                dispatch(AuthActionCreators.setIsLoading(false));\r\n            }, 1000)\r\n        } catch (e) {\r\n            dispatch(AuthActionCreators.setError('Произошла ошибка при логине'))\r\n        }\r\n    },\r\n    logout: () => async (dispatch: AppDispatch) => {\r\n        localStorage.removeItem('auth')\r\n        localStorage.removeItem('username')\r\n        dispatch(AuthActionCreators.setUser({} as IUser));\r\n        dispatch(AuthActionCreators.setIsAuth(false))\r\n    }\r\n}\r\n","import {EventActionEnum, SetEventsAction, SetGuestsAction} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\nimport {IEvent} from \"../../../models/IEvent\";\r\nimport {AppDispatch} from \"../../index\";\r\nimport UserService from \"../../../api/UserService\";\r\n\r\nexport const EventActionCreators = {\r\n    setGuests: (payload: IUser[]): SetGuestsAction => ({type: EventActionEnum.SET_GUESTS, payload}),\r\n    setEvents: (payload: IEvent[]): SetEventsAction => ({type: EventActionEnum.SET_EVENTS, payload}),\r\n    fetchGuests: () =>  async (dispatch: AppDispatch) => {\r\n        try {\r\n            const response = await UserService.getUsers()\r\n            dispatch(EventActionCreators.setGuests(response.data));\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n    createEvent: (event: IEvent) =>  async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            json.push(event);\r\n            dispatch(EventActionCreators.setEvents(json));\r\n            localStorage.setItem('events', JSON.stringify(json));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    },\r\n    fetchEvents: (username: string) => async (dispatch: AppDispatch) => {\r\n        try {\r\n            const events = localStorage.getItem(\"events\") || '[]'\r\n            const json = JSON.parse(events) as IEvent[];\r\n            const currentUserEvents = json.filter(ev => ev.author === username || ev.guest === username);\r\n            dispatch(EventActionCreators.setEvents(currentUserEvents));\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Login from \"../pages/Login\";\r\nimport Event from '../pages/Event';\r\n\r\nexport interface IRoute {\r\n    path: string;\r\n    component: React.ComponentType;\r\n    exact?: boolean;\r\n}\r\n\r\nexport enum RouteNames {\r\n    LOGIN = '/login',\r\n    EVENT = '/'\r\n}\r\n\r\nexport const publicRoutes: IRoute[] = [\r\n    {path: RouteNames.LOGIN, exact: true, component: Login}\r\n]\r\n\r\nexport const privateRoutes: IRoute[] = [\r\n    {path: RouteNames.EVENT, exact: true, component: Event}\r\n]\r\n","import {AuthActionCreators} from \"./auth/action-creators\";\r\nimport {EventActionCreators} from \"./event/action-creators\";\r\n\r\nexport const allActionCreators = {\r\n    ...AuthActionCreators,\r\n    ...EventActionCreators\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {allActionCreators} from \"../store/reducers/action-creators\";\r\nimport {useMemo} from \"react\";\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(allActionCreators, dispatch);\r\n}\r\n\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, Form, Input} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst LoginForm: FC = () => {\r\n    const {error, isLoading} = useTypedSelector(state => state.auth);\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const {login} = useActions()\r\n\r\n    const submit = () => {\r\n        login(username, password)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            onFinish={submit}\r\n        >\r\n            {error && <div style={{color: 'red'}}>\r\n                {error}\r\n            </div>}\r\n            <Form.Item\r\n                label=\"Имя пользователя\"\r\n                name=\"username\"\r\n                rules={[rules.required(\"Пожалуйста введите имя пользователя!\")]}\r\n            >\r\n                <Input\r\n                    value={username}\r\n                    onChange={e => setUsername(e.target.value)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Пароль\"\r\n                name=\"password\"\r\n                rules={[rules.required(\"Пожалуйста введите пароль\")]}\r\n            >\r\n                <Input\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                    type={\"password\"}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" loading={isLoading}>\r\n                    Войти\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, {FC} from 'react';\r\nimport {Card, Layout, Row} from \"antd\";\r\nimport LoginForm from \"../components/LoginForm\";\r\n\r\nconst Login: FC = () => {\r\n    return (\r\n        <Layout>\r\n            <Row justify=\"center\" align=\"middle\" className=\"h100\">\r\n                <Card>\r\n                    <LoginForm/>\r\n                </Card>\r\n            </Row>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","export const formatDate = (date: Date): string => {\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    return `${year}.${month}.${day}`\r\n}\r\n","import React, {FC} from 'react';\r\nimport {Calendar} from \"antd\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\n\r\ninterface EventCalendarProps {\r\n    events: IEvent[];\r\n}\r\n\r\nconst EventCalendar: FC<EventCalendarProps> = (props) => {\r\n\r\n    function dateCellRender(value: Moment) {\r\n        const formatedDate = formatDate(value.toDate());\r\n        const currentDayEvents = props.events.filter(ev => ev.date === formatedDate);\r\n        return (\r\n            <div>\r\n                {currentDayEvents.map((ev, index) =>\r\n                    <div key={index}>{ev.description}</div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Calendar\r\n            dateCellRender={dateCellRender}\r\n        />\r\n    );\r\n};\r\n\r\nexport default EventCalendar;\r\n","import React, {FC, useState} from 'react';\r\nimport {Button, DatePicker, Form, Input, Row, Select} from \"antd\";\r\nimport {rules} from \"../utils/rules\";\r\nimport {IUser} from \"../models/IUser\";\r\nimport {IEvent} from \"../models/IEvent\";\r\nimport {Moment} from \"moment\";\r\nimport {formatDate} from \"../utils/date\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\ninterface EventFormProps {\r\n    guests: IUser[],\r\n    submit: (event: IEvent) => void\r\n}\r\n\r\nconst EventForm: FC<EventFormProps> = (props) => {\r\n    const [event, setEvent] = useState<IEvent>({\r\n        author: '',\r\n        date: '',\r\n        description: '',\r\n        guest: ''\r\n    } as IEvent);\r\n    const {user} = useTypedSelector(state => state.auth)\r\n\r\n    const selectDate = (date: Moment | null) => {\r\n        if (date) {\r\n            setEvent({...event, date: formatDate(date.toDate())})\r\n        }\r\n    }\r\n\r\n    const submitForm = () => {\r\n        props.submit({...event, author: user.username})\r\n    }\r\n\r\n    return (\r\n        <Form onFinish={submitForm}>\r\n            <Form.Item\r\n                label=\"Описание события\"\r\n                name=\"description\"\r\n                rules={[rules.required()]}\r\n            >\r\n                <Input\r\n                    onChange={e => setEvent({...event, description: e.target.value})}\r\n                    value={event.description}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Дата события\"\r\n                name=\"date\"\r\n                rules={[rules.required(), rules.isDateAfter(\"Нельзя создать событие в прошлом\")]}\r\n            >\r\n                <DatePicker\r\n                    onChange={(date) => selectDate(date)}\r\n                />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Выберите гостя\"\r\n                name=\"guest\"\r\n                rules={[rules.required()]}\r\n            >\r\n                <Select onChange={(guest: string) => setEvent({...event, guest})}>\r\n                    {props.guests.map(guest =>\r\n                        <Select.Option key={guest.username} value={guest.username}>\r\n                            {guest.username}\r\n                        </Select.Option>\r\n                    )}\r\n                </Select>\r\n            </Form.Item>\r\n            <Row justify=\"end\">\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Создать\r\n                    </Button>\r\n                </Form.Item>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default EventForm;\r\n","import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Layout, Modal, Row} from \"antd\";\r\nimport EventCalendar from \"../components/EventCalendar\";\r\nimport EventForm from \"../components/EventForm\";\r\nimport {useActions} from \"../hooks/useActions\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {IEvent} from \"../models/IEvent\";\r\n\r\nconst Event: FC = () => {\r\n    const [modalVisible, setModalVisible] = useState(false);\r\n    const {fetchGuests, createEvent, fetchEvents} = useActions();\r\n    const {guests,events} = useTypedSelector(state => state.event);\r\n    const {user} = useTypedSelector(state => state.auth);\r\n\r\n    useEffect(() => {\r\n        fetchGuests()\r\n        fetchEvents(user.username);\r\n    }, [])\r\n\r\n    const addNewEvent = (event: IEvent) => {\r\n        setModalVisible(false);\r\n        createEvent(event);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <EventCalendar events={events}/>\r\n            <Row justify=\"center\">\r\n                <Button\r\n                    onClick={() => setModalVisible(true)}\r\n                >\r\n                    Добавить событие\r\n                </Button>\r\n            </Row>\r\n            <Modal\r\n                title=\"Добавить событие\"\r\n                visible={modalVisible}\r\n                footer={null}\r\n                onCancel={() => setModalVisible(false)}\r\n            >\r\n                <EventForm\r\n                    guests={guests}\r\n                    submit={addNewEvent}\r\n                />\r\n            </Modal>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Event;\r\n","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport {privateRoutes, publicRoutes, RouteNames} from \"../router\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\n\r\nconst AppRouter = () => {\r\n    const {isAuth} = useTypedSelector(state => state.auth);\r\n\r\n    return (\r\n        isAuth ?\r\n            <Switch>\r\n                {privateRoutes.map(route =>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.EVENT}/>\r\n            </Switch>\r\n            :\r\n            <Switch>\r\n                {publicRoutes.map(route =>\r\n                    <Route path={route.path}\r\n                           exact={route.exact}\r\n                           component={route.component}\r\n                           key={route.path}\r\n                    />\r\n                )}\r\n                <Redirect to={RouteNames.LOGIN}/>\r\n            </Switch>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, {FC} from 'react';\r\nimport {Layout, Menu, Row} from \"antd\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport {RouteNames} from \"../router\";\r\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\r\nimport {AuthActionCreators} from \"../store/reducers/auth/action-creators\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useActions} from \"../hooks/useActions\";\r\n\r\nconst Navbar: FC = () => {\r\n    const router = useHistory()\r\n    const {isAuth, user} = useTypedSelector(state => state.auth);\r\n    const {logout} = useActions()\r\n\r\n\r\n    return (\r\n        <Layout.Header>\r\n            <Row justify=\"end\">\r\n                {isAuth\r\n                    ?\r\n                    <>\r\n                        <div style={{color: 'white'}}>\r\n                            {user.username}\r\n                        </div>\r\n                        <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n\r\n                            <Menu.Item\r\n                                onClick={logout}\r\n                                key={1}\r\n                            >\r\n                                Выйти\r\n                            </Menu.Item>\r\n                        </Menu>\r\n                    </>\r\n                    :\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" selectable={false}>\r\n                        <Menu.Item\r\n                            onClick={() => router.push(RouteNames.LOGIN)}\r\n                            key={1}\r\n                        >\r\n                            Логин\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                }\r\n            </Row>\r\n        </Layout.Header>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, {FC, useEffect} from 'react';\r\nimport AppRouter from \"./components/AppRouter\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport {Layout} from \"antd\";\r\nimport './App.css';\r\nimport {useActions} from \"./hooks/useActions\";\r\nimport {IUser} from \"./models/IUser\";\r\n\r\nconst App:FC = () => {\r\n    const {setUser, setIsAuth} = useActions();\r\n\r\n    useEffect(() => {\r\n        if(localStorage.getItem('auth')) {\r\n            setUser({username: localStorage.getItem('username' || '')} as IUser)\r\n            setIsAuth(true);\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <Layout>\r\n            <Navbar/>\r\n            <Layout.Content>\r\n                <AppRouter />\r\n            </Layout.Content>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import {AuthAction, AuthActionEnum, AuthState} from \"./types\";\r\nimport {IUser} from \"../../../models/IUser\";\r\n\r\n\r\nconst initialState: AuthState = {\r\n    isAuth: false,\r\n    error: '',\r\n    isLoading: false,\r\n    user: {} as IUser\r\n}\r\n\r\nexport default function authReducer(state = initialState, action: AuthAction): AuthState {\r\n    switch (action.type) {\r\n        case AuthActionEnum.SET_AUTH:\r\n            return {...state, isAuth: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_USER:\r\n            return {...state, user: action.payload}\r\n        case AuthActionEnum.SET_ERROR:\r\n            return {...state, error: action.payload, isLoading: false}\r\n        case AuthActionEnum.SET_IS_LOADING:\r\n            return {...state, isLoading: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {EventAction, EventActionEnum, EventState} from \"./types\";\r\n\r\n\r\nconst initialState: EventState = {\r\n    events: [],\r\n    guests: []\r\n}\r\n\r\nexport default function EventReducer(state = initialState, action: EventAction): EventState {\r\n    switch (action.type) {\r\n        case EventActionEnum.SET_GUESTS:\r\n            return {...state, guests: action.payload}\r\n        case EventActionEnum.SET_EVENTS:\r\n            return {...state, events: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import auth from './auth'\r\nimport event from './event';\r\n\r\nexport default {\r\n    auth,\r\n    event\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst rootReducer = combineReducers(reducers)\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {store} from \"./store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}